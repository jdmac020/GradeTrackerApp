@model GradeTrackerApp.Models.Evaluation.EvaluationViewModel

<style>

    table td {
        padding-bottom: 5px;
        padding-left: 10px
    }

    table th {
        font-size: larger;
    }

        table th#scores {
            width: 30%;
            text-align: center
        }

    table td#grade {
        text-align: center
    }

    .detail {
        padding-left: 10px
    }
</style>

<h1>@Model.Name</h1>


<div id="details">

    <h3>Details</h3>
    <hr />

    <table>
        <tr>
            <th>@Html.LabelFor(model => model.Weight)</th>
        </tr>
        <tr>
            <td>@Html.DisplayFor(model => model.Weight)</td>
        </tr>
        <tr>
            <th>@Html.LabelFor(model => model.NumberOfScores)</th>
        </tr>
        <tr>
            <td>@Html.DisplayFor(model => model.NumberOfScores)</td>
        </tr>
        <tr>
            <th>@Html.LabelFor(model => model.PointsPossible)</th>
        </tr>
        <tr>
            <td>@Html.DisplayFor(model => model.PointsPossible)</td>
        </tr>
    </table>
</div>

<div id="grades">

    <h3>Grade</h3>
    <hr />

    <table>
        <tr>
            <th>@Html.LabelFor(model => model.PointsPossible)</th>
        </tr>
        <tr>
            <td>@Html.DisplayFor(model => model.PointsPossible)</td>
        </tr>
        <tr>
            <th>@Html.LabelFor(model => model.PointsEarned)</th>
        </tr>
        <tr>
            <td>@Html.DisplayFor(model => model.PointsEarned)</td>
        </tr>
        <tr>
            <th>@Html.LabelFor(model => model.CurrentPointsGrade)</th>
        </tr>
        <tr>
            <td>@Html.DisplayFor(model => model.CurrentPointsGrade)</td>
        </tr>
    </table>
</div>

<div id="scoreDiv">

    <h3>Scores</h3>
    <hr />

    @if (Model.Scores.Count > 0)
    {
        <table>
            <tr>
                <th id="scores">Type</th>
                <th id="scores">Current Grade</th>
                <th id="scores" colspan="3">Options</th>
            </tr>
            @foreach (var score in Model.Scores)
            {

                <tr>
                    <td>
                        @(score.Name)
                    </td>
                    <td id="grade">
                        @score.PointsGrade
                    </td>
                    <td>
                        @Html.ActionLink("View", "ViewScore", "Score", routeValues: new { scoreId = score.Id }, htmlAttributes: null)
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "StartUpdate", "Score", routeValues: new { scoreId = score.Id }, htmlAttributes: null)
                    </td>
                    @*<td>
                        <a class="delete-score-link" href='@Url.Action("DeleteScore", "Score", routeValues: new {scoreId = score.Id})'>Delete</a>
                        <div class="btn btn-primary delete-score-confirm" style="display:none" data-delete-id="@score.Id">Confirm Delete</div>
                        @Html.ActionLink("Delete", "DeleteScore", "Score", routeValues: new {scoreId = score.Id}, htmlAttributes: null)
                    </td>*@
                </tr>
            }
        </table>
        @Html.ActionLink("Add Another Score", "AddScore", "Score", routeValues: new { evaluationId = Model.Id }, htmlAttributes: null)
        <h4>Current Overall Grade in @Model.Name: @Model.CurrentPointsGrade</h4>
        <hr />

    }
    else
    {
        <p>There are no Scores associated with this Evaluation yet -- @Html.ActionLink("Add One!", "AddScore", "Score", routeValues: new { evaluationId = Model.Id }, htmlAttributes: null)</p>
    }
    <hr />

</div>

<div id="miscinfo">

    <h3>Misc Info</h3>

    <table>
        <tr>
            <th>
                @Html.LabelFor(model => model.LastModified)
            </th>
        </tr>
        <tr>
            <td class="detail">

                @if (Model.LastModified is null)
                {
                    @("Nah")
                }
                else
                {
                    @Model.LastModified.Value.ToShortDateString()
                }

                @*@Html.DisplayFor(model => $"{model.LastModified.ToShortDateString()} {model.LastModified.ToShortTimeString()}")*@
            </td>
        </tr>
    </table>
</div>

<div id="options">

    <h3>Options</h3>

    <table>
        <tr>
            <th>
                @Html.ActionLink("Make Changes To This Evaluation", "EditEvaluation", "Evaluation", routeValues: new { evaluationId = Model.Id }, htmlAttributes: null)
            </th>
        </tr>
        <tr>
            <th>
                <a class="delete-eval-link" href='@Url.Action("DeleteEvaluation", "Evaluation", routeValues: new {evaluationId = Model.Id})'>Delete This Evaluation</a>
                <div class="btn btn-primary delete-eval-confirm" style="display:none" data-delete-id="@Model.Id">You Sure, Sis?</div>
                @*@Html.ActionLink("Delete This Evaluation", "DeleteEvaluation", "Evaluation", routeValues: new {evaluationId = Model.Id}, htmlAttributes: null)*@
            </th>
        </tr>
        <tr>
            <th>
                @Html.ActionLink("Back to Course", "ViewCourse", "Course", routeValues: new { courseId = Model.CourseId }, htmlAttributes: null)
            </th>
        </tr>
    </table>
</div>

@section scripts{

<script type="text/javascript">

        $(function () {
            
            $("a.delete-eval-link").click(function () {

                var buttonChange = false;
                var mouseOnCount = 0;
                var mouseOffCount = 0;

                var deleteLink = $(this);
                deleteLink.hide();
                var confirmButton = deleteLink.siblings(".delete-eval-confirm");
                confirmButton.show();

                var cancelDelete = function() {
                    removeEvents();
                    showDeleteLink();
                    buttonChange = false;
                    mouseOnCount = 0;
                    mouseOffCount = 0;
                };

                var deleteItem = function() {

                    window.location.href = '@Url.Action("DeleteEvaluation", "Evaluation", routeValues: new { evaluationId = Model.Id})';

                };

                var removeEvents = function() {
                    confirmButton.off("click", deleteItem);
                    $(document).on("click", cancelDelete);
                    $(document).off("keypress", onKeyPress);
                };

                var showDeleteLink = function() {
                    confirmButton.hide();
                    deleteLink.show();
                };

                var onKeyPress = function(e) {
                    //Cancel if escape key pressed
                    if (e.which === 27) {
                        cancelDelete();
                    }
                };

                var mouseOn = function() {

                    if (mouseOffCount === 0) {
                        

                    } else if (buttonChange === false) {

                        confirmButton.text('Yes! Kill It With Fire');
                        buttonChange = true;

                    }

                };

                var mouseOff = function() {

                    if (mouseOffCount === 0) {

                        mouseOffCount++;

                    } else if (buttonChange === true) {

                        confirmButton.text('You Sure, Sis?');
                        buttonChange = false;

                    }
                };

                confirmButton.on("mouseover", mouseOn);
                confirmButton.on("mouseout", mouseOff);
                confirmButton.on("click", deleteItem);
                $(document).on("click", cancelDelete);
                $(document).on("keypress", onKeyPress);

                return false;
            });
        });

</script>
}

